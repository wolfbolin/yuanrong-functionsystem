/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2025. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package resources;

option go_package = "functionsystem/pkg/common/faas_common/grpc/pb/resource;resource";

import "common.proto";
import "affinity.proto";
import "core_service.proto";

message Value {
    enum Type {
        SCALAR = 0;
        RANGES = 1;
        SET = 2;
        COUNTER = 3;
        VECTORS = 4;
        END = 5;
    }

    message Scalar {
        double value = 1;
        double limit = 2;
    }

    message Range {
        uint64 begin = 1;
        uint64 end = 2;
    }

    message Ranges {
        repeated Range range = 1;
    }

    message Set {
        repeated string items = 1;
    }

    message Vectors {
        message Vector {
            repeated double values = 1;
        }

        message Category {
            // {uuid : Vector}
            map<string, Vector> vectors = 1;
        }

        // CPU | Memory | HBM | Stream ...
        map<string, Category> values = 1;
    }

    message Counter {
        map<string, uint64> items = 1;
    }
}

message Volume {
    enum VolumeSourceType {
        UNKNOWN = 0;
        LOCAL_DIR = 1;
        CONFIG_MAP = 2;
        EMPTY_DIR = 3;
        ELARA = 4;
    }

    enum VolumeMode {
        RW = 0;
        RO = 1;
    }

    VolumeMode mode = 1;
    VolumeSourceType sourceType = 2;
    string hostPath = 3;
    string containerPath = 4;
    string configMapPath = 5;
    string emptyDir = 6;
    string elaraPath = 7;
}

message DiskInfo {
    Volume volume = 1;
    string type = 2;
    string devPath = 3;
    string mountPath = 4;
}

enum AffinityType {
    PreferredAffinity     = 0;
    PreferredAntiAffinity = 1;
    RequiredAffinity      = 2;
    RequiredAntiAffinity  = 3;
}

message NodeAffinity {
    map<string, AffinityType> affinity = 1;
}

message InstanceAffinity {
    map<string, AffinityType> affinity = 1;
}

message ObjAffinity {
    affinity.Selector preferredAffinity = 1;
}

message TenantAffinity {
    affinity.Selector preferredAffinity     = 1;
    affinity.Selector requiredAntiAffinity  = 2;
}

message PreemptedAffinity {
    affinity.Selector preferredAffinity     = 1;
    affinity.Selector preferredAntiAffinity = 2;
}

message PendingAffinity {
    repeated affinity.ResourceAffinity resources = 1;
}

message ResourceGroupAffinity {
    affinity.Selector requiredAffinity      = 1;
}

message GroupPolicyAffinity {
    // for pack
    affinity.Selector preferredAffinity     = 1;
    // for spread
    affinity.Selector preferredAntiAffinity = 2;
    // for strict spread
    affinity.Selector requiredAntiAffinity  = 3;
}

message InnerSystemAffinity {
    ObjAffinity              data     = 1;
    TenantAffinity           tenant   = 2;
    PreemptedAffinity        preempt  = 3;
    // Used in fairness scheduling to filter resources similar to those required by pending requests.
    PendingAffinity          pending  = 4;
    ResourceGroupAffinity    rgroup = 5;
    GroupPolicyAffinity      grouplb = 6;
}

message Affinity {
    NodeAffinity nodeAffinity             = 1;
    InstanceAffinity instanceAffinity     = 2;
    InstanceAffinity instanceAntiAffinity = 3;
    affinity.ResourceAffinity resource    = 4;
    affinity.InstanceAffinity instance    = 5;
    InnerSystemAffinity       inner       = 6;
}

message Resource {
    string name = 1;

    // Resource type, maybe scalar/ranges/set
    Value.Type type = 2;

    // Resource of memory、cpu...
    Value.Scalar scalar = 3;

    // Resource of ip address、network port...
    Value.Ranges ranges = 4;

    // Resource of volume or disk
    Value.Set set = 5;

    // Used for ordered resources, such as NUMA nodes, NPU devices, GPU devices.
    Value.Vectors vectors = 6;

    string runtime = 7;
    string driver = 8;

    DiskInfo disk = 9;

    // Resource info of NPU/GPU
    //  {  "vendor": "huawei.com",
    //     "product_model", "Ascend910B4",
    //     "HBM": "1000,1000,1000"
    //     ...  }:
    map<string, string> heterogeneousInfo = 10;

    // If the resource is expired, do delete when deduction.
    // Used with Resource::vectors.
    bool expired = 11;
}

// resource map for resource common operater, such as +, -
message Resources {
    map<string, Resource> resources = 1;
}

enum CreateTarget {
  INSTANCE           = 0;  // indicate instance schedule
  RESOURCE_GROUP     = 1;  // indicate resource group schedule
}

message ScheduleOption {
    string                      schedPolicyName     = 1;
    int32                       priority            = 2;
    Affinity                    affinity            = 3;
    uint32                      initCallTimeOut     = 4;

    // resource_owner:uuid
    map<string, string>         resourceSelector    = 5;
    // this field will be passed to k8s when create new pod
    map<string, string>         nodeSelector        = 6;
    map<string, string>         extension           = 7;
    core_service.InstanceRange  range               = 8;
    int64                       scheduleTimeoutMs   = 9;
    bool                        preemptedAllowed    = 10;
    // while target is RESOURCE_GROUP, the instanceID should be formed like {rGroup}_{tenantID}_bundle_{index}
    CreateTarget                target              = 11;
    // which rGroup resource was specified
    string                      rGroupName          = 12;
}

message InstanceStatus {
    // code in state-machine
    int32 code = 1;
    // process exit code reported by runtime manager
    int32 exitCode = 2;
    // reason why the instance in this status, developer can understand
    string msg = 3;
    // process exit type
    int32 type = 4;
    // instance err code, defined in function system
    int32 errCode = 5;
}

message InstanceInfo {
    // podname in K8S BCM, InstanceID in YuanRong system.
    string instanceID = 1;

    // which request to create this instance
    string requestID = 2;

    // hostname while be set to /etc/hostname when K8S BCM, runtime in YuanRong system
    string runtimeID = 3;

    // runtime ip:port in YuanRong system
    string runtimeAddress = 4;

    // functionAgentID in YuanRong system
    string functionAgentID = 5;

    // K8S BCM is nodeName;
    string functionProxyID = 6;

    // container image in K8S BCM, function name in YuanRong system
    string function = 7;

    // the restart policy when instance running failed
    string restartPolicy = 8;
    Resources resources = 9;

    Resources actualUse = 10;

    // special option for scheduler
    ScheduleOption scheduleOption = 11;

    // create options (eg.concurrency)
    map<string, string> createOptions = 12;

    // instance labels
    repeated string labels = 13;

    // Instance start time
    string startTime = 14;

    InstanceStatus instanceStatus = 15;

    string jobID = 16;

    // the topology is local->domain1->domain2
    repeated string schedulerChain = 17;

    // parentID is the instanceID of creator
    string parentID = 18;

    // parentFunctionProxyAID is functionProxyAID of creator
    string parentFunctionProxyAID = 19;

    // the storage type of the function corresponding to this instance.
    string storageType = 20;

    // schedule retry times
    int32 scheduleTimes = 21;

    // local redeploy times (in original local scheduler), default is 1
    int32 deployTimes = 22;

    // args in creating request
    repeated common.Arg args = 23;

    bool isCheckpointed = 24;

    // version indicates the number of times that instance information is modified in etcd.
    int64 version = 25;

    string dataSystemHost = 26;

    bool detached = 27;

    int64 gracefulShutdownTime = 28;

    string tenantID = 29;

    bool isSystemFunc = 30;

    string groupID = 31;

    // indicate an instance whether is a low reliability instance
    bool lowReliability = 32;
    // extension field
    map<string, string> extensions = 33;
    // the instance was scheduled on this resource unit
    string unitID = 34;

    // kv labels
    map<string, string> kvLabels = 35;
}

message RouteInfo {
    string instanceID = 1;
    string runtimeAddress = 2;
    string functionAgentID = 3;
    string function = 4;
    string functionProxyID = 5;
    InstanceStatus instanceStatus = 6;
    string jobID = 7;
    string parentID = 8;
    string requestID = 9; // Need while Update Instance
    string tenantID = 10; // Need while iam
    bool isSystemFunc = 11; // Need while iam
    int64 version = 12;    // indicates the number of times that instance information is modified in etcd
}

message SystemInfo {
    string architecture = 1;
    string systemUUID = 2;
    string machineID = 3;
    string kernelVersion = 4;
    string osImage = 5;
    string agentVersion = 6;
    string runtimeVersion = 7;
    string bootId = 8;
}

message AgentInfo {
    string localID = 1;
    string agentID = 2;
    string alias = 3;
}

message BucketIndex {
    message Bucket {
        message Info {
            // the number of pod is shared by instances
            int32 sharedNum = 1;
            // the number of pod is monopolized by an instance
            int32 monopolyNum = 2;
        }
        Info total = 1;
        // key is scheduler name or function agent name
        // value is Info
        map<string, Info> allocatable = 2;
    }
    // key is mem of agent
    map<string, Bucket> buckets = 1;
}

message StatusChange {
    uint32 status = 1;
}

message InstanceChange {
    enum InstanceChangeType {
        ADD = 0;
        DELETE = 1;
    }
    InstanceChangeType changeType = 1;
    string instanceId = 2;
    InstanceInfo instance = 3;
}

message Modification {
    StatusChange statusChange = 1;
    repeated InstanceChange instanceChanges = 3;
}

message Addition {
    ResourceUnit resourceUnit = 1;
}

message Deletion {
}

message ResourceUnitChange {
    string resourceUnitId = 1;
    oneof Changed {
        Addition addition = 2;
        Deletion deletion = 3;
        Modification modification = 4;
    }
}

message ResourceUnitChanges {
    repeated ResourceUnitChange changes = 1;
    uint64 startRevision = 2;
    uint64 endRevision = 3;
    string localId = 4;
    string localViewInitTime = 5;
}

message ResourceUnit {
    // NodeName in K8S BCM, FunctionAgentID/DomainSchedulerID in YuanRong system
    string id = 1;

    // Total Resource of this Unit, key is ResourceName
    Resources capacity = 2;

    // Allocatable Resource of this Unit, key is ResourceName
    Resources allocatable = 3;

    Resources actualUse = 4;

    // now only using in YuanRong system; key is FunctionAgentID/DomainSchedulerID
    map<string, ResourceUnit> fragment = 5;

    // pod in K8S BCM, instance in YuanRong system
    map<string, InstanceInfo> instances = 6;

    // nodeLabel(s) of resource unit
    //   map k is different label name
    //   map v is the occuring times counter for every different value
    // eg. agent01:{x:y} agent02:{x:z} agent03:{x:z}, will be joined to {x:{y:1,z:2}} in upper level resource unit
    // this representation supports add/sub operation, the key can be erased iff when counter decrease to 0
    map<string, Value.Counter> nodeLabels = 7;

    // node SystemInfo in K8S BCM
    SystemInfo systemInfo = 8;

    // node support max instance num;
    int32 maxInstanceNum = 9;

    // fragment index
    // key is the cpu/mem proportion
    // value is the index which including a map of mem-bucket
    map<string, BucketIndex> bucketIndexs = 10;

    uint64 revision = 11;
    // unit status.
    // 0 - normal
    // 1 - evicting, means the unit is unavailable
    // 2 - recovering, means the unit is unavailable
    // 3 - to be deleted by Scaler using K8S API, means the unit is unavailable
    uint32 status = 12;

    // alias for the current resource unit;
    // useful for users to evict resource
    string alias = 13;

    // On domain, each ownerID of fragment is the specified local id
    // On local, ownerID is real agent id. because of the fragment of bundle split from the agent id(1) is bundle id
    // which is different from agent id.
    string ownerId = 14;

    // Use the identifier at initialization as the initialization time of resourceunit
    string viewInitTime = 15;
}

enum InvokeType {
    CreateInstance = 0;
}

enum ApiType {
    Function = 0;
    Posix = 1;
}

enum LanguageType {
    Cpp = 0;
    Python =1;
    Java = 2;
    Golang = 3;
    NodeJS = 4;
    CSharp = 5;
    Php = 6;
}

message FunctionMeta {
    string applicationName = 1;
    string moduleName = 2;
    string functionName = 3;
    string className = 4;
    LanguageType language = 5;
    string codeID = 6;
    string signature = 7;
    ApiType apiType = 8;
    string name = 9; // The designated actor name
    string ns = 10; // The designated actor namespace
    string functionID = 11;
    string initializerCodeID = 12;
    bool isAsync = 13;
    bool isGenerator = 14;
}

message FunctionID {
    LanguageType language = 1;
    string functionID = 2;
}

message MetaConfig {
    string jobID = 1;
    repeated string codePaths = 2;
    int64 recycleTime = 3;
    int64 maxTaskInstanceNum = 4;
    int64 maxConcurrencyCreateNum = 5;
    bool enableMetrics = 6;
    int64 threadPoolSize = 7;
    repeated FunctionID functionIDs = 8;
    string ns = 9;
    repeated string schedulerInstanceIds = 10;
    map<string, string> customEnvs = 11;
    string tenantID = 12;
    int64 localThreadPoolSize = 13;
    repeated string functionMasters = 14;
    bool isLowReliabilityTask = 15;
}

message MetaData {
    InvokeType invokeType = 1;
    FunctionMeta functionMeta = 2;
    MetaConfig config = 3;
}
